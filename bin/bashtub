#!/bin/bash

shopt -s expand_aliases

declare -i TEST_CASE_COUNT=0
declare -a FAILED_CASES=()
declare -a FAILURE_LOCATIONS=()
declare -a FAILURE_REASONS=()

to_sentence() {
  local space_separated=$(echo $1 | sed -e 's/^testcase_//' | tr '_' ' ')
  echo "${space_separated^}"
}

assert_equal_matcher() {
  echo "\`$1' expected but was \`$2'"
  [[ "$1" == "$2" ]]
}

assert_match_matcher() {
  echo "\'$2' was expected to match \`$1'"
  [[ "$2" =~ $1 ]]
}

assert_true_matcher() {
  echo "\`$@' was expected to return true"
  subject $@
  [[ $status -eq 0 ]]
}

assert_false_matcher() {
  echo "\`$@' was expected to return false"
  subject $@
  [[ $status -ne 0 ]]
}

located_assertion_base() {
  local location="$1:$2:in \`$3'"
  local case_name=$(to_sentence $3)
  local matcher=$4
  shift; shift; shift; shift

  TEST_CASE_COUNT+=1
  reason=$($matcher "$@")
  if [[ $? -eq 0 ]]; then
    printf '\e[32m.\e[m'
  else
    printf "\e[31mF\e[m"
    FAILED_CASES=("${FAILED_CASES[@]}" "$case_name")
    FAILURE_LOCATIONS=("${FAILURE_LOCATIONS[@]}" "$location")
    FAILURE_REASONS=("${FAILURE_REASONS[@]}" "$reason")
  fi
}

subject() {
  . <({ err=$({ out=$(eval $@); sta=$?; } 2>&1; declare -p out sta >&2); declare -p err; } 2>&1)
  stdout="$out"
  stderr="$err"
  status="$sta"
}

print_result() {
  printf '\n\n'

  if [[ ${#FAILED_CASES[@]} -eq 0 ]]; then
    echo "$TEST_CASE_COUNT examples, 0 failures"
    return 0
  else
    echo "Failers:"
    for ((i = 0; i < ${#FAILED_CASES[@]}; ++i)) {
      printf "%2d) %s\n" $(($i + 1)) "${FAILED_CASES[$i]}"
      printf "    \e[31m${FAILURE_LOCATIONS[$i]}\e[m\n"
      printf "    \e[31m${FAILURE_REASONS[$i]}\e[m\n"
    }
    echo
    printf "\e[31m$TEST_CASE_COUNT examples, ${#FAILED_CASES[@]} failures\e[m\n"
    return 1
  fi
}

declare_assertions() {
  local matcher
  for matcher in $(compgen -A function | grep '_matcher$'); do
    aliased_id=$(echo $matcher | sed -e 's/_matcher$//g')
    located_fn=$(echo $matcher | sed -e 's/^/located_/g')
    alias $aliased_id="located_assertion_base "'$BASH_SOURCE $LINENO $FUNCNAME '$matcher
  done
}

declare_assertions

for f in $@; do
  unset teardown setup
  source "$f"
  hash setup 2>/dev/null && setup
  for testcase in $(compgen -A function | grep '^testcase_'); do
    $testcase
    unset $testcase
  done
  hash teardown 2>/dev/null && teardown
done

print_result
